/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/library/tree": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List the contents of a library tree */
        get: operations["getTree"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a media container
         * @description Creates an empty container that is ready to receive an upload.
         */
        post: operations["createMedia"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{containerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a media container */
        get: operations["getMedia"];
        put?: never;
        post?: never;
        /**
         * Delete a media container
         * @description All associated assets will be deleted.
         */
        delete: operations["deleteMedia"];
        options?: never;
        head?: never;
        /** Update a media container */
        patch: operations["updateMedia"];
        trace?: never;
    };
    "/media/{containerId}/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Upload an asset to a media container */
        put: operations["upload"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/setup/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get first time setup status */
        get: operations["getSetupStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateMediaContainer: {
            /**
             * @description The MIME type of the primary asset
             * @example image/jpeg
             * @enum {string}
             */
            mimeType: "image/jpg" | "image/jpeg" | "image/png" | "image/gif" | "image/webp";
            /**
             * @description A descriptive name for the underlying media
             * @example Blissful Fields
             */
            name?: string;
            /**
             * @description The directory path of the media container
             * @example /
             */
            path?: string;
        };
        CreateMediaContainerResponse: {
            /**
             * Format: date-time
             * @description The date and time the upload URL expires.
             * @example 2025-10-21T00:03:47.239Z
             */
            expiresAt: string;
            /**
             * @description The ID of the media container
             * @example o15l7w5xov8pwwbr4j224f9i
             */
            id: string;
            /**
             * @description A descriptive name for the underlying media
             * @example Blissful Fields
             */
            name: string;
            /**
             * @description The directory path of the media container
             * @example /
             */
            path: string;
            /**
             * @description The status of the media container
             * @example WAITING_FOR_UPLOAD
             * @enum {string}
             */
            status: "WAITING_FOR_UPLOAD" | "PROCESSING" | "READY" | "FAILED" | "PARTIALLY_FAILED" | "DELETED";
            /**
             * @description The signed URL to upload the asset with.
             * @example https://longpoint.example.com/api/media/abc123/upload?token=abcdefghijklmnopqrst
             */
            url: string;
        };
        DeleteMediaContainer: {
            /**
             * @description Whether to permanently delete the media container
             * @default false
             * @example false
             */
            permanently: Record<string, never>;
        };
        DirectoryTreeItem: {
            /**
             * @description The full path to the directory
             * @example /skate-tricks/kickflips
             */
            path: string;
            /**
             * @description The URL to list the contents of the directory
             * @example https://longpoint.example.com/api/library/tree?path=/skate-tricks/kickflips
             */
            url: string;
        };
        LibraryTree: {
            /**
             * @description The items in the tree
             * @example [
             *       {
             *         "type": "DIRECTORY",
             *         "content": {
             *           "path": "/skate-tricks/kickflips/bloopers",
             *           "url": "https://longpoint.example.com/api/library/tree?path=/skate-tricks/kickflips/bloopers"
             *         }
             *       },
             *       {
             *         "type": "MEDIA",
             *         "content": {
             *           "id": "123",
             *           "name": "Stairs",
             *           "type": "IMAGE",
             *           "status": "READY",
             *           "createdAt": "2025-10-16T00:00:00.000Z"
             *         }
             *       },
             *       {
             *         "type": "MEDIA",
             *         "content": {
             *           "id": "123",
             *           "name": "Long gap",
             *           "type": "IMAGE",
             *           "status": "READY",
             *           "createdAt": "2025-10-16T00:00:00.000Z"
             *         }
             *       }
             *     ]
             */
            items: components["schemas"]["TreeItem"][];
            /**
             * @description The library tree path
             * @example /skate-tricks/kickflips
             */
            path: string;
        };
        MediaAsset: {
            /**
             * @description The aspect ratio of the media asset, if applicable
             * @example 1.777777
             */
            aspectRatio: Record<string, never> | null;
            /**
             * @description The height of the media asset in pixels, if applicable
             * @example 100
             */
            height: Record<string, never> | null;
            /**
             * @description The ID of the media asset
             * @example jwlvoi8ddqhy6xdfxo4jfmaq
             */
            id: string;
            /**
             * @description The MIME type of the media asset
             * @example image/jpeg
             * @enum {string}
             */
            mimeType: "image/jpg" | "image/jpeg" | "image/png" | "image/gif" | "image/webp";
            /**
             * @description The size of the media asset in bytes
             * @example 100
             */
            size: Record<string, never> | null;
            /**
             * @description The status of the media asset
             * @example WAITING_FOR_UPLOAD
             * @enum {string}
             */
            status: "WAITING_FOR_UPLOAD" | "PROCESSING" | "READY" | "FAILED";
            /**
             * @description The URL of the media asset
             * @example https://longpoint.example.com/storage/default/abc123/original.jpg
             */
            url: Record<string, never> | null;
            /**
             * @description The variant of the media asset
             * @example ORIGINAL
             * @enum {string}
             */
            variant: "ORIGINAL";
            /**
             * @description The width of the media asset in pixels, if applicable
             * @example 100
             */
            width: Record<string, never> | null;
        };
        MediaAssetVariants: {
            /** @description The original media asset */
            original: components["schemas"]["MediaAsset"];
        };
        MediaContainer: {
            /**
             * @description The accessible media assets in the container
             * @example {
             *       "original": {
             *         "id": "c1ktr6cwmzuso1znmfeovvjt",
             *         "variant": "ORIGINAL",
             *         "status": "READY",
             *         "mimeType": "image/jpeg",
             *         "width": 1920,
             *         "height": 1080,
             *         "size": 950120,
             *         "aspectRatio": 1.777777,
             *         "url": "https://longpoint.example.com/storage/default/abc123/original.jpg"
             *       }
             *     }
             */
            assets: components["schemas"]["MediaAssetVariants"];
            /**
             * Format: date-time
             * @description When the media container was created
             * @example 2025-10-20T23:03:47.224Z
             */
            createdAt: string;
            /**
             * @description The ID of the media container
             * @example o15l7w5xov8pwwbr4j224f9i
             */
            id: string;
            /**
             * @description A descriptive name for the underlying media
             * @example Blissful Fields
             */
            name: string;
            /**
             * @description The directory path of the media container
             * @example /
             */
            path: string;
            /**
             * @description The status of the media container
             * @example WAITING_FOR_UPLOAD
             * @enum {string}
             */
            status: "WAITING_FOR_UPLOAD" | "PROCESSING" | "READY" | "FAILED" | "PARTIALLY_FAILED" | "DELETED";
            /**
             * @description The primary media type.
             * @example IMAGE
             * @enum {string}
             */
            type: "IMAGE";
        };
        MediaContainerSummary: {
            /**
             * Format: date-time
             * @description When the media container was created
             * @example 2025-10-20T23:03:47.224Z
             */
            createdAt: string;
            /**
             * @description The ID of the media container
             * @example o15l7w5xov8pwwbr4j224f9i
             */
            id: string;
            /**
             * @description A descriptive name for the underlying media
             * @example Blissful Fields
             */
            name: string;
            /**
             * @description The directory path of the media container
             * @example /
             */
            path: string;
            /**
             * @description The status of the media container
             * @example WAITING_FOR_UPLOAD
             * @enum {string}
             */
            status: "WAITING_FOR_UPLOAD" | "PROCESSING" | "READY" | "FAILED" | "PARTIALLY_FAILED" | "DELETED";
        };
        SetupStatus: {
            /**
             * @description Whether the first time setup is complete
             * @example false
             */
            isFirstTimeSetup: boolean;
        };
        TreeItem: {
            /** @description The content of the tree item */
            content: Record<string, never>;
            /**
             * @description The tree item type
             * @example DIRECTORY
             * @enum {string}
             */
            type: "DIRECTORY" | "MEDIA";
        };
        UpdateMediaContainer: {
            /**
             * @description A descriptive name for the underlying media
             * @example Blissful Fields
             */
            name?: string;
            /**
             * @description The directory path of the media container
             * @example /
             */
            path?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getTree: {
        parameters: {
            query?: {
                /** @description The path to get the tree for */
                path?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The contents of the library tree */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryTree"];
                };
            };
        };
    };
    createMedia: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMediaContainer"];
            };
        };
        responses: {
            /** @description Use the returned signed url to upload the original asset. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateMediaContainerResponse"];
                };
            };
        };
    };
    getMedia: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                containerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaContainer"];
                };
            };
            /** @description Media container not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "errorCode": "RESOURCE_NOT_FOUND",
                     *       "messages": [
                     *         "Media container with id k9ces3dq3cbqf09oszk23mk3 not found"
                     *       ]
                     *     } */
                    "application/json": {
                        errorCode?: string;
                        messages?: string[];
                    };
                };
            };
        };
    };
    deleteMedia: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                containerId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteMediaContainer"];
            };
        };
        responses: {
            /** @description The media container was deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateMedia: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                containerId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMediaContainer"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaContainer"];
                };
            };
            /** @description Media container not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "errorCode": "RESOURCE_NOT_FOUND",
                     *       "messages": [
                     *         "Media container with id k9ces3dq3cbqf09oszk23mk3 not found"
                     *       ]
                     *     } */
                    "application/json": {
                        errorCode?: string;
                        messages?: string[];
                    };
                };
            };
            /** @description The media container already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "errorCode": "RESOURCE_ALREADY_EXISTS",
                     *       "messages": [
                     *         "Media container with name \"My Container\" already exists at path \"/\""
                     *       ]
                     *     } */
                    "application/json": {
                        errorCode?: string;
                        messages?: string[];
                    };
                };
            };
        };
    };
    upload: {
        parameters: {
            query: {
                /** @description The token used to upload the asset */
                token: string;
            };
            header?: never;
            path: {
                containerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The asset was uploaded */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Media container not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "errorCode": "RESOURCE_NOT_FOUND",
                     *       "messages": [
                     *         "Media container with id k9ces3dq3cbqf09oszk23mk3 not found"
                     *       ]
                     *     } */
                    "application/json": {
                        errorCode?: string;
                        messages?: string[];
                    };
                };
            };
        };
    };
    getSetupStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetupStatus"];
                };
            };
        };
    };
}
