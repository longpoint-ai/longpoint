model MediaContainer {
  id        String               @id @default(cuid(2))
  name      String
  status    MediaContainerStatus
  path      String               @default("/")
  /// The primary media type hosted by the container
  type      MediaType
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  deletedAt DateTime?

  images ImageMedia[]

  @@unique([path, name])
  @@index([path])
  @@index([status])
}

model UploadToken {
  id                 String    @id @default(cuid(2))
  token              String    @unique
  createdAt          DateTime  @default(now())
  expiresAt          DateTime
  uploadInProgressAt DateTime?

  images ImageMedia[]

  @@index([expiresAt])
}

model ImageMedia {
  id        String   @id @default(cuid(2))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  variant   MediaVariant       @default(ORIGINAL)
  status    MediaVariantStatus
  extension String
  width     Int?
  height    Int?
  size      Int?

  containerId   String
  container     MediaContainer @relation(fields: [containerId], references: [id], onDelete: Cascade)
  uploadToken   UploadToken?   @relation(fields: [uploadTokenId], references: [id], onDelete: SetNull)
  uploadTokenId String?

  @@index([containerId, status])
}

enum MediaVariant {
  ORIGINAL
}

enum MediaContainerStatus {
  /// The container is waiting for the original asset to be uploaded
  WAITING_FOR_UPLOAD
  /// One or more variants are being processed
  PROCESSING
  /// The entire container is ready for use
  READY
  /// The original asset failed to upload
  FAILED
  /// One or more variants failed to process, but some are ready for use
  PARTIALLY_FAILED
  /// The container has been soft deleted
  DELETED
}

enum MediaVariantStatus {
  /// The variant is waiting for an asset to be uploaded
  WAITING_FOR_UPLOAD
  /// The variant is being processed
  PROCESSING
  /// The variant is ready for use
  READY
  /// The variant failed to process or be uploaded
  FAILED
}

enum MediaType {
  IMAGE
}
